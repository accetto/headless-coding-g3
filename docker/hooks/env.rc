### All variables in capitals can be set also by environment.

### build context is the path to the Dockerfile
### it is expected that '_mydir' is already set by the calling script
declare _build_context="$(dirname ${_mydir})"

### Docker Hub: GitHub source branch to use
### local: virtual source branch (technically always the current git branch)
declare _branch="${SOURCE_BRANCH:-$1}"

### which image variation to build (feature blend)
declare _blend="${DOCKER_TAG:-$2}"

### building stage 
declare _stage

### owner of the builder and deployment repositories must be the same
declare _owner

if [ $# -ge 2 ] ; then

    shift 2
    _stage="local"
    _owner="accetto"

    ### supporting local testing of the complete CI workflow
    if [ -f "${_build_context}"/hooks/secrets.rc ] ; then
        source "${_build_context}"/hooks/secrets.rc
    fi

else
    _stage="dockerhub"
    _owner="accetto"
fi

### 'DOCKER_REPO' is the repository where the image is built (builder repository)
### it is initialized by the environment on Docker Hub
### example: 'index.docker.io/accetto/headless-coding-g3' by building on Docker Hub
### example: 'local/ubuntu-g3' by building locally
DOCKER_REPO=${DOCKER_REPO:-${_owner}/dev-headless-coding-g3}

### 'DOCKER_TAG' is the tag in the repository where the image is built
DOCKER_TAG="${_blend}"

### '_deploy_repo' is the repository where the image will be (additionally) deployed (deployment repository)
### deploy repository could be also identical with the builder repository
# declare _deploy_repo="${DOCKER_REPO}"
# declare _deploy_repo="${_owner}/${DEPLOY_REPO:-headless-coding-g3}"
declare _deploy_repo

### array of the image tags to be deployed
declare -a _deploy_tags
declare _deploytag

### relative path to the readme file resources (relative to the project root)
declare _readme_context

### GitHub repo and branch containing the post_push workflow to trigger
POST_PUSH_WORKFLOW_REPO=${POST_PUSH_WORKFLOW_REPO:-"headless-coding-g3"}
POST_PUSH_WORKFLOW_BRANCH=${POST_PUSH_WORKFLOW_BRANCH:-"master"}

### examples
# VERSION_STICKER_PREFIX=${VERSION_STICKER_SUFFIX:-"LOCAL-"}
# VERSION_STICKER_SUFFIX=${VERSION_STICKER_SUFFIX:-"-BETA"}

### Features can be enabled or disabled by setting the related variables.
### Setting it to "0" disables the feature.
### Setting it to "1" enforces the feature.
### Anything else, including null and empty string, does not change the feature's default value.
### NOTE: They are also other feature environment variables that are set directly in the Dockerfile.
### FEATURES_BUILD_SLIM: if to add '--no-install-recommends' to 'apt-get install'
### FEATURES_SCREENSHOOTING: if 'xfce4-screenshooter' (+2.0MB) and 'ristretto' (+43.0MB) should be included
### FEATURES_THUMBNAILING: if 'tumbler' (+19.0MB) should be included
### FEATURES_USER_GROUP_OVERRIDE: if overriding container's user group should be supported
### Remark: There are also 'FEATURES_*' variables that are always set, e.g. 'FEATURES_VERSION_STICKER=1'.

### These features influence the content of almost all stages:
if [ "${FEATURES_BUILD_SLIM}" == "0" ] ; then FEATURES_BUILD_SLIM="" ; else FEATURES_BUILD_SLIM=1 ; fi

### These features influence user permissions inside the image:
if [ "${FEATURES_USER_GROUP_OVERRIDE}" == "1" ] ; then FEATURES_USER_GROUP_OVERRIDE=1 ; else FEATURES_USER_GROUP_OVERRIDE="" ; fi

### These features influence the content of the related stages:
if [ "${FEATURES_SCREENSHOOTING}" == "1" ] ; then FEATURES_SCREENSHOOTING=1 ; else FEATURES_SCREENSHOOTING="" ; fi
if [ "${FEATURES_THUMBNAILING}" == "1" ] ; then FEATURES_THUMBNAILING=1 ; else FEATURES_THUMBNAILING="" ; fi

### These features influence the building graph:
if [ "${FEATURES_CHROMIUM}" == "1" ] ; then FEATURES_CHROMIUM=1 ; else FEATURES_CHROMIUM="" ; fi
if [ "${FEATURES_FIREFOX}" == "1" ] ; then FEATURES_FIREFOX=1 ; else FEATURES_FIREFOX="" ; fi
if [ "${FEATURES_FIREFOX_PLUS}" == "1" ] ; then FEATURES_FIREFOX_PLUS=1 ; else FEATURES_FIREFOX_PLUS="" ; fi
if [ "${FEATURES_NODEJS}" == "1" ] ; then FEATURES_NODEJS=1 ; else FEATURES_NODEJS="" ; fi
if [ "${FEATURES_NOVNC}" == "1" ] ; then FEATURES_NOVNC=1 ; else FEATURES_NOVNC="" ; fi
if [ "${FEATURES_POSTMAN}" == "1" ] ; then FEATURES_POSTMAN=1 ; else FEATURES_POSTMAN="" ; fi
if [ "${FEATURES_PYTHON}" == "1" ] ; then FEATURES_PYTHON=1 ; else FEATURES_PYTHON="" ; fi
if [ "${FEATURES_VSCODE}" == "1" ] ; then FEATURES_VSCODE=1 ; else FEATURES_VSCODE="" ; fi

### The reason for this 'case' is to support some special branches/builds if required.
case "${_branch}" in

    ### default (master), developer (dev, dev-*) and release (v*) builds
    master | dev | dev-* | v* )

        BASEIMAGE=${BASEIMAGE:-"ubuntu"}
        BASETAG=${BASETAG:-"20.04"}

        ### 'DOCKERFILE_PATH' is set by the environment on Docker Hub (relative to the build context)
        ### example: DOCKERFILE_PATH=Dockerfile
        # DOCKERFILE_PATH=${DOCKERFILE_PATH}

        case "${_blend}" in
            
            ### -------------------------
            ### ubuntu-vnc-xfce-nodejs-g3
            ### -------------------------

            nodejs | nodejs-* | nodejs-current | nodejs-current-* )

                DOCKERFILE_PATH="${_build_context}/Dockerfile.xfce.nodejs"

                _deploy_repo="${_owner}/ubuntu-vnc-xfce-nodejs-g3"
                _readme_context="docker/xfce-nodejs"

                FEATURES_NODEJS=1
                
                if [[ "${_blend}" =~ current ]] ; then

                    NODEJS_VERSION=$( "${_mydir}"/release_of.sh 'nodejs-current' )

                else
                    NODEJS_VERSION=$( "${_mydir}"/release_of.sh 'nodejs-lts' )
                fi

                if [[ ! "${_blend}" =~ -vnc ]] ; then
                    FEATURES_NOVNC=1
                fi

                if [[ "${_blend}" =~ chromium ]] ; then

                    FEATURES_CHROMIUM=1
                    CHROMIUM_VERSION=$( "${_mydir}"/release_of.sh 'chromium-1804' )

                elif [[ "${_blend}" =~ firefox ]] ; then

                    FEATURES_FIREFOX=1
                    FEATURES_FIREFOX_PLUS=1
                fi

                if [[ "${_blend}" =~ vscode ]] ; then

                    FEATURES_VSCODE=1
                fi

                if [[ "${_blend}" =~ -vnc ]] ; then

                    ### intended for images without noVNC 
                    _deploytag="vnc${FEATURES_NOVNC:+-novnc}${FEATURES_VSCODE:+-vscode}"
                    _deploytag="${_deploytag}${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}"

                else
                    ### intended for images with both VNC and noVNC (latest)
                    _deploytag="latest${FEATURES_VSCODE:+-vscode}${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}"
                fi

                if [[ "${_blend}" =~ -current ]] ; then

                    _deploytag="current-${_deploytag}"
                fi

                ### vnc-novnc -> latest
                _deploytag=( "${_deploytag/vnc-novnc/latest}" )

                ### remove 'latest-' and '-latest'
                _deploytag=( "${_deploytag/latest-/}" )
                _deploytag=( "${_deploytag/-latest/}" )

                _deploy_tags=( "${_deploytag}" )
                ;;

            ### -------------------------
            ### ubuntu-vnc-xfce-python-g3
            ### -------------------------

            python | python-* )

                DOCKERFILE_PATH="${_build_context}/Dockerfile.xfce.python"

                _deploy_repo="${_owner}/ubuntu-vnc-xfce-python-g3"
                _readme_context="docker/xfce-python"

                FEATURES_PYTHON=1

                if [[ ! "${_blend}" =~ -vnc ]] ; then
                    FEATURES_NOVNC=1
                fi

                if [[ "${_blend}" =~ chromium ]] ; then

                    FEATURES_CHROMIUM=1
                    CHROMIUM_VERSION=$( "${_mydir}"/release_of.sh 'chromium-1804' )

                elif [[ "${_blend}" =~ firefox ]] ; then

                    FEATURES_FIREFOX=1
                    FEATURES_FIREFOX_PLUS=1
                fi

                if [[ "${_blend}" =~ vscode ]] ; then

                    FEATURES_VSCODE=1
                fi

                if [[ "${_blend}" =~ -vnc ]] ; then

                    ### intended for images without noVNC 
                    _deploytag="vnc${FEATURES_NOVNC:+-novnc}${FEATURES_VSCODE:+-vscode}"
                    _deploytag="${_deploytag}${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}"

                else
                    ### intended for images with both VNC and noVNC (latest)
                    _deploytag="latest${FEATURES_VSCODE:+-vscode}${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}"
                fi

                ### vnc-novnc -> latest
                _deploytag=( "${_deploytag/vnc-novnc/latest}" )

                ### remove 'latest-' and '-latest'
                _deploytag=( "${_deploytag/latest-/}" )

                _deploy_tags=( "${_deploytag}" )
                ;;

            ### --------------------------
            ### ubuntu-vnc-xfce-postman-g3
            ### --------------------------

            postman | postman-* )

                DOCKERFILE_PATH="${_build_context}/Dockerfile.xfce.postman"

                _deploy_repo="${_owner}/ubuntu-vnc-xfce-postman-g3"
                _readme_context="docker/xfce-postman"

                FEATURES_POSTMAN=1

                if [[ ! "${_blend}" =~ -vnc ]] ; then
                    FEATURES_NOVNC=1
                fi

                if [[ "${_blend}" =~ chromium ]] ; then

                    FEATURES_CHROMIUM=1
                    CHROMIUM_VERSION=$( "${_mydir}"/release_of.sh 'chromium-1804' )

                elif [[ "${_blend}" =~ firefox ]] ; then

                    FEATURES_FIREFOX=1
                    FEATURES_FIREFOX_PLUS=1
                fi

                if [[ "${_blend}" =~ -vnc ]] ; then

                    ### intended for images without noVNC 
                    _deploytag="vnc${FEATURES_NOVNC:+-novnc}"
                    _deploytag="${_deploytag}${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}"

                else
                    ### intended for images with both VNC and noVNC (latest)
                    _deploytag="latest${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}"
                fi

                ### vnc-novnc -> latest
                _deploytag=( "${_deploytag/vnc-novnc/latest}" )

                ### remove 'latest-' and '-latest'
                _deploytag=( "${_deploytag/latest-/}" )

                _deploy_tags=( "${_deploytag}" )
                ;;

            ### --------------------------------
            ### headless-coding-g3 (base images)
            ### --------------------------------

            ### These base images will not be built or published on Docker Hub.

            coding | coding-* )

                DOCKERFILE_PATH="${_build_context}/Dockerfile.xfce"

                _deploy_repo="${_owner}/headless-coding-g3"
                _readme_context="docker/xfce"

                if [[ ! "${_blend}" =~ -vnc ]] ; then
                    FEATURES_NOVNC=1
                fi

                if [[ "${_blend}" =~ fugo ]] ; then

                    FEATURES_USER_GROUP_OVERRIDE=1
                fi

                if [[ "${_blend}" =~ chromium ]] ; then

                    FEATURES_CHROMIUM=1
                    CHROMIUM_VERSION=$( "${_mydir}"/release_of.sh 'chromium-1804' )

                elif [[ "${_blend}" =~ firefox-plus ]] ; then

                    FEATURES_FIREFOX=1
                    FEATURES_FIREFOX_PLUS=1

                elif [[ "${_blend}" =~ firefox ]] ; then
                
                    FEATURES_FIREFOX=1
                fi

                if [[ "${_blend}" =~ -vnc ]] ; then

                    ### intended for images without noVNC 
                    _deploytag="vnc${FEATURES_NOVNC:+-novnc}${FEATURES_VSCODE:+-vscode}"
                    _deploytag="${_deploytag}${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}${FEATURES_FIREFOX_PLUS:+-plus}"

                else
                    ### intended for images with both VNC and noVNC (latest)
                    _deploytag="latest${FEATURES_VSCODE:+-vscode}${FEATURES_CHROMIUM:+-chromium}${FEATURES_FIREFOX:+-firefox}${FEATURES_FIREFOX_PLUS:+-plus}"
                fi

                ### vnc-novnc -> latest
                _deploytag=( "${_deploytag/vnc-novnc/latest}" )

                ### remove 'latest-' and '-latest'
                _deploytag=( "${_deploytag/latest-/}" )

                _deploy_tags=( "${_deploytag}" )
                ;;

            *)
                echo "Unsupported blend '${_blend}'"
                exit 1
                ;;
        esac
        ;;
    *)
        echo "Unsupported branch '${_branch}'"
        exit 1
        ;;
esac
